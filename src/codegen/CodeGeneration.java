package codegen;

import scanner.TokenType;
import symboltable.SymbolTable;
import syntaxtree.*;

/**
 * @author William Mork
 *
 * This class will uses the syntax tree generated by the parser to create MIPS assembly code.
 */
public class CodeGeneration {

    private ProgramNode programNode;
    private SymbolTable symbolTable;
    private int currentReg;
    private int loopIndex;
    private int ifIndex;

    public CodeGeneration(ProgramNode programNode, SymbolTable symbolTable){
        programNode = programNode;
        symbolTable = symbolTable;
        currentReg = 0;
        loopIndex = 0;
        ifIndex = 0;
    }

    public String codeWriter(){
        StringBuilder codeString = new StringBuilder();
        codeString.append(".data\n");

        return codeString.toString();
    }

    public String operationWriter(OperationNode operationNode, String resultReg) {
        StringBuilder operationString = new StringBuilder();

        return operationString.toString();
    }

    /**
     * Generates assembly code for a value node.
     *
     * @param valueNode The value node
     * @param resultRegister The MIPS register where the result is stored.
     * @return MIPS assembly code for a value store.
     */
    public String valueWriter(ValueNode valueNode, String resultReg)
    {
        StringBuilder valueString = new StringBuilder();
        String value = valueNode.getAttribute();
        valueString.append("addi   " + resultReg + ",   $zero, " + value + "\n");
        return valueString.toString();
    }

    public String expressionWriter(ExpressionNode expressionNode, String resultReg) {
        StringBuilder expressionString = new StringBuilder();

        return expressionString.toString();
    }

    public String statementWriter(StatementNode statementNode, String resultReg) {
        StringBuilder statementString = new StringBuilder();

        return statementString.toString();
    }

    private String writeAssignment(AssignmentStatementNode assignmentStatementNode, String resultReg) {
        StringBuilder assignmentString = new StringBuilder();
        return assignmentString.toString();
    }

    private String pushToStack() {
        StringBuilder pushString = new StringBuilder();

        for (int i = 0; i > 0; i++) {
        }

        return pushString.toString();
    }

    private String popFromStack() {
        StringBuilder popString = new StringBuilder();

        for (int i = 0; i > 0; i++) {
        }

        return popString.toString();
    }

}
