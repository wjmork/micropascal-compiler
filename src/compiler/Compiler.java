package compiler;

import analysis.SemanticAnalyzer;
import parser.Parser;
import symboltable.SymbolTable;
import syntaxtree.ProgramNode;
import codegen.*;

import java.io.*;

/**
 * Top-level class for the compiler. To compile a file, run this class from the
 * command line with the location of a micro-pascal program file as a parameter.
 *
 * @author William Mork
 * @version 1.0
 */
public class Compiler {

    public static void main(String[] args) {
        File inputfile = null;

        // Load sample program if no arguments are passed.
        if (args.length == 0) {
            System.out.println("No file input. Compiling sample program...");
            inputfile = new File("src/pascal/money.pas");
        } else if (args.length == 1) {
            System.out.println("File found. Compiling...");
            inputfile = new File(args[0]);
        } else {
            System.out.println("Error: File load failed. Please use the location of a Micro-Pascal file as the only input parameter.");
        }

        Parser parser = new Parser(inputfile);

        System.out.println("Parsing program...");
        ProgramNode rootNode = parser.program();
        System.out.println("File parsed.");
        System.out.println("Created Syntax Tree.");

        SymbolTable symbolTable = parser.getSymbolTable();
        System.out.println("Created Symbol Table.");

        System.out.println("Running Semantic Analysis...");
        SemanticAnalyzer analysis = new SemanticAnalyzer(rootNode, symbolTable);
        System.out.println("File passed Semantic Analysis.");

        System.out.println("Running Code Generation...");
        CodeGeneration codeGenerator = new CodeGeneration(rootNode, symbolTable);
        System.out.println("MIPS ssembly code generated.");

        System.out.println("Writing Symbol Table to file...");
        exportSymbolTable(symbolTable);
        System.out.println("The symbol table can be found in the product/output/ directory.");

        System.out.println("Writing Syntax Tree to file...");
        exportSyntaxTree(rootNode);
        System.out.println("The syntax tree can be found in the product/output/ directory.");

        System.out.println("Writing MIPS code to file...");
        exportAssembly(codeGenerator.codeWriter());
        System.out.println("The MIPS assembly code can be found in the product/output/ directory.");
    }

    /**
     * Writes the symbol table to a file.
     * @param symbolTable symbol table to be written to a file.
     */
    public static void exportSymbolTable(SymbolTable symbolTable) {
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("product/output/symboltable.txt")))) {
            writer.write(symbolTable.toString());
        }
        catch (Exception e) {
            System.out.println("Error exporting symbol table file.");
        }
    }

    /**
     * Writes the indented syntax tree to a file.
     * @param rootProgramNode The root program node of the syntax tree.
     */
    public static void exportSyntaxTree(ProgramNode rootProgramNode) {
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("product/output/syntaxtree.txt")))) {
            writer.write(rootProgramNode.indentedToString(0));
        }
        catch (Exception e) {
            System.out.println("Error exporting syntax tree file.");
        }
    }

    /**
     * Writes the generated MIPS code to a file.
     * @param generatedCodeString The String, generated by the code generation module, containing the MIPS assembly code for a program.
     */
    public static void exportAssembly(String generatedCodeString) {
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("product/output/MIPS.asm")))) {
            writer.write(generatedCodeString);
        }
        catch (Exception e) {
            System.out.println("Error exporting MIPS assembly file.");
        }
    }
}
